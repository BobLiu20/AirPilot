


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ;*******************************************************
                       *************************************************
    3 00000000         ;                                                uC/OS-I
                       II
    4 00000000         ;                                          The Real-Time
                        Kernel
    5 00000000         ;
    6 00000000         ;
    7 00000000         ;                              (c) Copyright 2010; Micri
                       um, Inc.; Weston, FL
    8 00000000         ;                    All rights reserved.  Protected by 
                       international copyright laws.
    9 00000000         ;
   10 00000000         ;                                           ARM Cortex-M
                       4 Port
   11 00000000         ;
   12 00000000         ; File      : OS_CPU_A.ASM
   13 00000000         ; Version   : V3.01.2
   14 00000000         ; By        : JJL
   15 00000000         ;             BAN
   16 00000000         ;
   17 00000000         ; For       : ARMv7 Cortex-M4
   18 00000000         ; Mode      : Thumb-2 ISA
   19 00000000         ; Toolchain : RealView Development Suite
   20 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   21 00000000         ;             ARM Developer Suite (ADS)
   22 00000000         ;             Keil uVision
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         
   26 00000000         ;*******************************************************
                       *************************************************
   27 00000000         ;                                          PUBLIC FUNCTI
                       ONS
   28 00000000         ;*******************************************************
                       *************************************************
   29 00000000         
   30 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   31 00000000                 EXTERN           OSPrioCur
   32 00000000                 EXTERN           OSPrioHighRdy
   33 00000000                 EXTERN           OSTCBCurPtr
   34 00000000                 EXTERN           OSTCBHighRdyPtr
   35 00000000                 EXTERN           OSIntExit
   36 00000000                 EXTERN           OSTaskSwHook
   37 00000000                 EXTERN           OS_CPU_ExceptStkBase
   38 00000000         
   39 00000000         
   40 00000000                 EXPORT           OSStartHighRdy ; Functions decl
                                                            ared in this file
   41 00000000                 EXPORT           OSCtxSw
   42 00000000                 EXPORT           OSIntCtxSw
   43 00000000                 EXPORT           OS_CPU_PendSVHandler
   44 00000000         
   45 00000000                 EXPORT           OS_CPU_FP_Reg_Push
   46 00000000                 EXPORT           OS_CPU_FP_Reg_Pop



ARM Macro Assembler    Page 2 


   47 00000000         
   48 00000000         
   49 00000000         ;PAGE
   50 00000000         ;*******************************************************
                       *************************************************
   51 00000000         ;                                               EQUATES
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         
   54 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   55 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   56 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   57 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   58 00000000         
   59 00000000         
   60 00000000         ;*******************************************************
                       *************************************************
   61 00000000         ;                                     CODE GENERATION DI
                       RECTIVES
   62 00000000         ;*******************************************************
                       *************************************************
   63 00000000         
   64 00000000         ;   PRESERVE8
   65 00000000         ;   THUMB
   66 00000000         
   67 00000000         ;  AREA CODE, CODE, READONLY
   68 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   69 00000000                 THUMB
   70 00000000                 REQUIRE8
   71 00000000                 PRESERVE8
   72 00000000         
   73 00000000         
   74 00000000         ;PAGE
   75 00000000         ;*******************************************************
                       *************************************************
   76 00000000         ;                                   FLOATING POINT REGIS
                       TERS PUSH
   77 00000000         ;                             void  OS_CPU_FP_Reg_Push (
                       CPU_STK  *stkPtr)
   78 00000000         ;
   79 00000000         ; Note(s) : 1) This function saves S0-S31, and FPSCR reg
                       isters of the Floating Point Unit.
   80 00000000         ;
   81 00000000         ;           2) Pseudo-code is:
   82 00000000         ;              a) Get FPSCR register value;



ARM Macro Assembler    Page 3 


   83 00000000         ;              b) Push value on process stack;
   84 00000000         ;              c) Push remaining regs S0-S31 on process 
                       stack;
   85 00000000         ;              d) Update OSTCBCurPtr->StkPtr;
   86 00000000         ;*******************************************************
                       *************************************************
   87 00000000         
   88 00000000         OS_CPU_FP_Reg_Push
   89 00000000 F3EF 8109       MRS              R1, PSP     ; PSP is process st
                                                            ack pointer
   90 00000004 B141            CBZ              R1, OS_CPU_FP_nosave ; Skip FP 
                                                            register save the f
                                                            irst time
   91 00000006         
   92 00000006 EEF1 1A10       VMRS             R1, FPSCR
   93 0000000A F840 1D04       STR              R1, [R0, #-4]!
   94 0000000E ED20 0A20       VSTMDB           R0!, {S0-S31}
   95 00000012 4926            LDR              R1, =OSTCBCurPtr
   96 00000014 680A            LDR              R2, [R1]
   97 00000016 6010            STR              R0, [R2]
   98 00000018         OS_CPU_FP_nosave
   99 00000018 4770            BX               LR
  100 0000001A         
  101 0000001A         ;PAGE
  102 0000001A         ;*******************************************************
                       *************************************************
  103 0000001A         ;                                   FLOATING POINT REGIS
                       TERS POP
  104 0000001A         ;                             void  OS_CPU_FP_Reg_Pop (C
                       PU_STK  *stkPtr)
  105 0000001A         ;
  106 0000001A         ; Note(s) : 1) This function restores S0-S31, and FPSCR 
                       registers of the Floating Point Unit.
  107 0000001A         ;
  108 0000001A         ;           2) Pseudo-code is:
  109 0000001A         ;              a) Restore regs S0-S31 of new process sta
                       ck;
  110 0000001A         ;              b) Restore FPSCR reg value
  111 0000001A         ;              c) Update OSTCBHighRdyPtr->StkPtr pointer
                        of new proces stack;
  112 0000001A         ;*******************************************************
                       *************************************************
  113 0000001A         
  114 0000001A         OS_CPU_FP_Reg_Pop
  115 0000001A ECB0 0A20       VLDMIA           R0!, {S0-S31}
  116 0000001E C802            LDMIA            R0!, {R1}
  117 00000020 EEE1 1A10       VMSR             FPSCR, R1
  118 00000024 4922            LDR              R1, =OSTCBHighRdyPtr
  119 00000026 680A            LDR              R2, [R1]
  120 00000028 6010            STR              R0, [R2]
  121 0000002A 4770            BX               LR
  122 0000002C         
  123 0000002C         ;PAGE
  124 0000002C         ;*******************************************************
                       *************************************************
  125 0000002C         ;                                         START MULTITAS
                       KING
  126 0000002C         ;                                      void OSStartHighR
                       dy(void)



ARM Macro Assembler    Page 4 


  127 0000002C         ;
  128 0000002C         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  129 0000002C         ;              the first task to start.
  130 0000002C         ;
  131 0000002C         ;           2) OSStartHighRdy() MUST:
  132 0000002C         ;              a) Setup PendSV exception priority to low
                       est;
  133 0000002C         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  134 0000002C         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  135 0000002C         ;              d) Trigger PendSV exception;
  136 0000002C         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  137 0000002C         ;*******************************************************
                       *************************************************
  138 0000002C         
  139 0000002C         OSStartHighRdy
  140 0000002C 4821            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  141 0000002E F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  142 00000032 7001            STRB             R1, [R0]
  143 00000034         
  144 00000034 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  145 00000036 F380 8809       MSR              PSP, R0
  146 0000003A         
  147 0000003A 481F            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  148 0000003C 6801            LDR              R1, [R0]
  149 0000003E F381 8808       MSR              MSP, R1
  150 00000042         
  151 00000042 481E            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  152 00000044 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  153 00000048 6001            STR              R1, [R0]
  154 0000004A         
  155 0000004A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  156 0000004C         
  157 0000004C         OSStartHang
  158 0000004C E7FE            B                OSStartHang ; Should never get 
                                                            here
  159 0000004E         
  160 0000004E         
  161 0000004E         ;PAGE
  162 0000004E         ;*******************************************************
                       *************************************************
  163 0000004E         ;                       PERFORM A CONTEXT SWITCH (From t
                       ask level) - OSCtxSw()
  164 0000004E         ;



ARM Macro Assembler    Page 5 


  165 0000004E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  166 0000004E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  167 0000004E         ;*******************************************************
                       *************************************************
  168 0000004E         
  169 0000004E         OSCtxSw
  170 0000004E 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  171 00000050 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  172 00000054 6001            STR              R1, [R0]
  173 00000056 4770            BX               LR
  174 00000058         
  175 00000058         
  176 00000058         ;PAGE
  177 00000058         ;*******************************************************
                       *************************************************
  178 00000058         ;                   PERFORM A CONTEXT SWITCH (From inter
                       rupt level) - OSIntCtxSw()
  179 00000058         ;
  180 00000058         ; Note(s) : 1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  181 00000058         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  182 00000058         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  183 00000058         ;*******************************************************
                       *************************************************
  184 00000058         
  185 00000058         OSIntCtxSw
  186 00000058 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  187 0000005A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  188 0000005E 6001            STR              R1, [R0]
  189 00000060 4770            BX               LR
  190 00000062         
  191 00000062         
  192 00000062         ;PAGE
  193 00000062         ;*******************************************************
                       *************************************************
  194 00000062         ;                                       HANDLE PendSV EX
                       CEPTION
  195 00000062         ;                                   void OS_CPU_PendSVHa
                       ndler(void)
  196 00000062         ;
  197 00000062         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  198 00000062         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  199 00000062         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  200 00000062         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  201 00000062         ;              this way means that context saving and re



ARM Macro Assembler    Page 6 


                       storing is identical whether it is initiated from
  202 00000062         ;              a thread or occurs due to an interrupt or
                        exception.
  203 00000062         ;
  204 00000062         ;           2) Pseudo-code is:
  205 00000062         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  206 00000062         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  207 00000062         ;              c) Save the process SP in its TCB, OSTCBC
                       urPtr->OSTCBStkPtr = SP;
  208 00000062         ;              d) Call OSTaskSwHook();
  209 00000062         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  210 00000062         ;              f) Get current ready thread TCB, OSTCBCur
                       Ptr = OSTCBHighRdyPtr;
  211 00000062         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdyPtr->OSTCBStkPtr;
  212 00000062         ;              h) Restore R4-R11 from new process stack;
                       
  213 00000062         ;              i) Perform exception return which will re
                       store remaining context.
  214 00000062         ;
  215 00000062         ;           3) On entry into PendSV handler:
  216 00000062         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  217 00000062         ;                 xPSR, PC, LR, R12, R0-R3
  218 00000062         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  219 00000062         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  220 00000062         ;              d) OSTCBCurPtr      points to the OS_TCB 
                       of the task to suspend
  221 00000062         ;                 OSTCBHighRdyPtr  points to the OS_TCB 
                       of the task to resume
  222 00000062         ;
  223 00000062         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  224 00000062         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  225 00000062         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  226 00000062         ;*******************************************************
                       *************************************************
  227 00000062         
  228 00000062         OS_CPU_PendSVHandler
  229 00000062 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  230 00000064 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  231 00000068 B138            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  232 0000006A         
  233 0000006A 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack



ARM Macro Assembler    Page 7 


  234 0000006C E880 0FF0       STM              R0, {R4-R11}
  235 00000070         
  236 00000070                 IF               {FPU} != "SoftVFP"
  237 00000070 ED20 8B10       VSTMFD           r0!, {d8 - d15} ; push FPU regi
                                                            ster s16~s31
  238 00000074                 ENDIF
  239 00000074         
  240 00000074 490D            LDR              R1, =OSTCBCurPtr ; OSTCBCurPtr-
                                                            >OSTCBStkPtr = SP;
  241 00000076 6809            LDR              R1, [R1]
  242 00000078 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  243 0000007A         
  244 0000007A         ; At this point, entire context of process has been save
                       d
  245 0000007A         OS_CPU_PendSVHandler_nosave
  246 0000007A B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  247 0000007C 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  248 0000007E 4780            BLX              R0
  249 00000080 F85D EB04       POP              {R14}
  250 00000084         
  251 00000084 480F            LDR              R0, =OSPrioCur ; OSPrioCur   = 
                                                            OSPrioHighRdy;
  252 00000086 4910            LDR              R1, =OSPrioHighRdy
  253 00000088 780A            LDRB             R2, [R1]
  254 0000008A 7002            STRB             R2, [R0]
  255 0000008C         
  256 0000008C 4807            LDR              R0, =OSTCBCurPtr ; OSTCBCurPtr 
                                                            = OSTCBHighRdyPtr;
  257 0000008E 4908            LDR              R1, =OSTCBHighRdyPtr
  258 00000090 680A            LDR              R2, [R1]
  259 00000092 6002            STR              R2, [R0]
  260 00000094         
  261 00000094 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            RdyPtr->StkPtr;
  262 00000096         
  263 00000096                 IF               {FPU} != "SoftVFP"
  264 00000096 ECB0 8B10       VLDMFD           r0!, {d8 - d15} ; pop FPU regis
                                                            ter s16~s31
  265 0000009A                 ENDIF
  266 0000009A         
  267 0000009A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  268 0000009E 3020            ADDS             R0, R0, #0x20
  269 000000A0 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  270 000000A4 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  271 000000A8 B662            CPSIE            I
  272 000000AA 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  273 000000AC         



ARM Macro Assembler    Page 8 


  274 000000AC                 END
              00000000 
              00000000 
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\Obj
\os_cpu_a.d -o.\Obj\os_cpu_a.o -ID:\keil_MDK\ARM\RV31\INC -ID:\keil_MDK\ARM\CMS
IS\Include -ID:\keil_MDK\ARM\Inc\ST\STM32F4xx --list=.\Obj\os_cpu_a.lst uCOS-II
I\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 68 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000004E

Symbol: OSCtxSw
   Definitions
      At line 169 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 41 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000058

Symbol: OSIntCtxSw
   Definitions
      At line 185 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 42 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000004C

Symbol: OSStartHang
   Definitions
      At line 157 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 158 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy
   Definitions
      At line 139 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 40 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_FP_Reg_Pop 0000001A

Symbol: OS_CPU_FP_Reg_Pop
   Definitions
      At line 114 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 46 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Pop used once
OS_CPU_FP_Reg_Push 00000000

Symbol: OS_CPU_FP_Reg_Push
   Definitions
      At line 88 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 45 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OS_CPU_FP_Reg_Push used once
OS_CPU_FP_nosave 00000018

Symbol: OS_CPU_FP_nosave



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 98 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 90 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OS_CPU_FP_nosave used once
OS_CPU_PendSVHandler 00000062

Symbol: OS_CPU_PendSVHandler
   Definitions
      At line 228 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 43 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler used once
OS_CPU_PendSVHandler_nosave 0000007A

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 245 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 231 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 54 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 151 in file uCOS-III\Ports\os_cpu_a.asm
      At line 170 in file uCOS-III\Ports\os_cpu_a.asm
      At line 186 in file uCOS-III\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 57 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 152 in file uCOS-III\Ports\os_cpu_a.asm
      At line 171 in file uCOS-III\Ports\os_cpu_a.asm
      At line 187 in file uCOS-III\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 56 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 141 in file uCOS-III\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 55 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 140 in file uCOS-III\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 35 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 31 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 251 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 32 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 252 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 30 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSRunning unused
OSTCBCurPtr 00000000

Symbol: OSTCBCurPtr
   Definitions
      At line 33 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 95 in file uCOS-III\Ports\os_cpu_a.asm
      At line 240 in file uCOS-III\Ports\os_cpu_a.asm
      At line 256 in file uCOS-III\Ports\os_cpu_a.asm

OSTCBHighRdyPtr 00000000

Symbol: OSTCBHighRdyPtr
   Definitions
      At line 34 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 118 in file uCOS-III\Ports\os_cpu_a.asm
      At line 257 in file uCOS-III\Ports\os_cpu_a.asm

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 36 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 247 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

OS_CPU_ExceptStkBase 00000000

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 37 in file uCOS-III\Ports\os_cpu_a.asm
   Uses
      At line 147 in file uCOS-III\Ports\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
355 symbols in table
